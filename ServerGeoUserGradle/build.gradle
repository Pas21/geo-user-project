/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'

//Apply findbugs inspection plugin
apply plugin: 'findbugs'

//Apply Jacoco plugin
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
	//compile fileTree('libs') {
    //    include '*.jar'
    //}

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    
    //Import all necessary external libraries 
    compile 'org.apache.commons:commons-math3:3.6.1','com.google.guava:guava:21.0','org.hamcrest:hamcrest-core:1.3'
 	compile 'com.google.code.gson:gson:2.8+'	
 	compile 'org.restlet.jee:org.restlet:2.3+'
 	
 	//Import findbugs library
 	compile 'com.google.code.findbugs:annotations:3+'
 	
 	//import jacoco library
 	compile 'org.jacoco:jacoco-maven-plugin:0.7.+'	
 	
 	//Import hibernate library
	compile 'org.hibernate:hibernate-core:5+'
	//compile group: 'org.hibernate.orm.tooling', name: 'hibernate-enhance-maven-plugin', version: '5+'
	
	//Import MySQL connector java driver
	compile 'mysql:mysql-connector-java:5+'	//compile 'mysql:mysql-connector-java:5.1.44'
	// Use JUnit test framework
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


//findbugs tasks settings
findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "low"
    includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
    //excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(JacocoReport) {
    reports {
		xml{
			enabled false
			destination "$project.buildDir/reports/jacoco/jacoco.xml"
		}
		csv.enabled false
		html{
			enabled true
			destination project.file("$project.buildDir/reports/jacoco/jacoco.html")
		}
	}
}

test {
    reports.html.destination = file("$project.buildDir/reports/JUnitReport")
    finalizedBy jacocoTestReport
}

task createDB {
     project.exec {
		//commandLine 'C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql', "--user=utente", "--password=password",
    	//"--host=localhost", "--port=3306", "--execute=CREATE DATABASE IF NOT EXISTS geouserdb"
    	
    	commandLine 'mysql', "--user=root", "--host=localhost", "--execute=CREATE DATABASE IF NOT EXISTS geouserdb"
    	
	}    
}

task loadDB {
	project.exec {
		standardInput = new FileInputStream(project.file("$rootProject.projectDir/geouserdb.sql"))
    	//commandLine 'C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysql', "--user=utente", "--password=password",
    	//"--host=localhost", "--port=3306", 'geouserdb'
    	commandLine 'mysql', "--user=root", "--host=localhost", 'geouserdb'
	}   
}

loadDB.dependsOn createDB
tasks.test.dependsOn loadDB

task printJacocoReport {
	project.exec {
   	workingDir "$rootProject.projectDir/"
    	commandLine 'gradle test jacocoTestReport'
	}         
}

printJacocoReport.onlyIf{
   tasks.test.didWork
}

